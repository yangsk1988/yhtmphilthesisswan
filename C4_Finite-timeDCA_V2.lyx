#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\options onecolumn,12pt,A4paper
\use_default_options true
\begin_modules
theorems-ams
theorems-sec
eqs-within-sections
figs-within-sections
tabs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 4cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author 5862369 "HT" 
\author 5863457 "ht" 
\end_header

\begin_body

\begin_layout Section
Finite-time Consensus on generalized conditions (todo check 1)
\begin_inset CommandInset label
LatexCommand label
name "sub:Finite-time-Consensus-on"

\end_inset


\end_layout

\begin_layout Standard
In the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Find-the-Consensus"

\end_inset

, it is shown that if each node knows the network topology (or eigenvalues
 of the weight matrix 
\begin_inset Formula $W$
\end_inset

), the consensus value can be calculated by a linear combination of past
 local values.
 However, having knowledge of the network topology in every node is a demanding
 assumption.
 Although a distributive algorithm to calculate the linear combination has
 also been introduced in 
\begin_inset CommandInset citation
LatexCommand cite
key "Sundaram2007"

\end_inset

, it requires several runs of the consensus algorithm initialized with a
 set of linear independent vectors.
 Alternatively, the original consensus algorithm can run many instances
 in parallel with a set of independent initial values.
 However, the data transmission at each iteration increases.
 Futhermore, this method may not reliable to topology changes during the
 of multiple re-initializations of original consensus algorithm.
 
\end_layout

\begin_layout Standard
Here we propose a generalized finite-time consensus algorithm, which does
 not require knowledge of network topology and re-initialization of the
 original consensus algorithm for several times.
 Before introducing the algorithm, there are too important linear filter
 need to be introduced, as the algorithm is based on the properties of these
 filters.
\end_layout

\begin_layout Subsection
Linear Predictor For Local Value (todo check 1)
\end_layout

\begin_layout Standard
In observing the convergence curve of each node's local value sequence,
 we would come to the idea that the sequence must obeys some rule as it
 converges.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Local-Value-Decomposition"

\end_inset

, it is shown that local value vector can be decomposed in terms of eigenvalues
 and eigenvectors.
 Based on this fact, a consensus value estimation method by inverting the
 Vandermonde matrix 
\change_deleted 5862369 1350052595
and an information flooding techniques
\change_unchanged
 are proposed.
\end_layout

\begin_layout Standard
However, another important property of the FO-DCA need to be highlighted
 in this section.
 To show this 
\change_deleted 5862369 1350052658
see how this property can be explained
\change_unchanged
, we have the following theorem.
\end_layout

\begin_layout Theorem
\begin_inset CommandInset label
LatexCommand label
name "thm:LV predictor a_i"

\end_inset

 For the DAC iteration 
\begin_inset Formula $\mathbf{x}(k+1)=W\mathbf{x}(k)$
\end_inset

 with 
\begin_inset Formula $W$
\end_inset

 satisfying the convergence condition in theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:convergence condition"

\end_inset

 , for any 
\begin_inset Formula $k\geq m$
\end_inset

 , where 
\begin_inset Formula $m$
\end_inset

 is a certain number, local value 
\shape up

\begin_inset Formula $x_{i}\left(k\right)$
\end_inset


\shape default
 at node 
\begin_inset Formula $v_{i}$
\end_inset

 is equal to a linear combination of local values of itself in 
\begin_inset Formula $m$
\end_inset

 previous time steps, i.e.
 
\begin_inset Formula $x_{i}\left(k\right)=-a_{m-1}x_{i}\left(k-1\right)-\ldots-a_{1}x_{i}\left(k-m+1\right)-a_{0}x_{i}\left(k-m\right)$
\end_inset

.
 
\end_layout

\begin_layout Proof
the minimal polynomial of 
\begin_inset Formula $W$
\end_inset

 is given by
\end_layout

\begin_layout Proof
\begin_inset Formula 
\begin{eqnarray}
p(\lambda) & = & \prod_{i=1}^{r}\left(\lambda-\lambda_{i}\right)^{r_{i}}=0\nonumber \\
 & = & \lambda^{m}+a_{m-1}\lambda^{m-1}+\ldots+a_{1}\lambda+a_{0}\label{eq:polynomial of matrix W}
\end{eqnarray}

\end_inset

where 
\begin_inset Formula $m=\sum_{i=1}^{r}r_{i}$
\end_inset

.
 Since 
\begin_inset Formula $p\left(W\right)=\mathbf{0}_{n\times n}$
\end_inset

, we have, 
\begin_inset Formula 
\[
W^{m}+a_{m-1}W^{m-1}+\ldots+a_{1}W+a_{0}I=\mathbf{0}_{n\times n}
\]

\end_inset

multiplying both sides with 
\begin_inset Formula $\mathbf{x}\left(0\right)$
\end_inset

 we obtain 
\begin_inset Formula 
\begin{equation}
\mathbf{x}\left(k\right)+a_{m-1}\mathbf{x}\left(k-1\right)+\ldots+a_{0}\mathbf{x}\left(k-m\right)=\mathbf{0}_{n\times n}\label{eq:x(k+r) vector predictor}
\end{equation}

\end_inset

For any node 
\begin_inset Formula $v_{i}\in{\cal V}$
\end_inset

, its local value at time 
\begin_inset Formula $k$
\end_inset

 is just the 
\begin_inset Formula $i^{th}$
\end_inset

 component of 
\begin_inset Formula $\mathbf{x}\left(k\right)$
\end_inset

.
 After a little evolution, we have
\end_layout

\begin_layout Proof
\begin_inset Formula 
\begin{equation}
x_{i}\left(k\right)=-a_{m-1}x_{i}\left(k-1\right)-\ldots-a_{0}x_{i}\left(k-m\right)\label{eq:x(k+r) predictor}
\end{equation}

\end_inset

In other words, 
\begin_inset Formula $x_{i}\left(k\right)$
\end_inset

 can be predicted by a FIR filter given by 
\begin_inset Formula $\left[-a_{r},-a_{r-1},\ldots,-a_{0}\right]$
\end_inset

, if we pass a number of consecutive local values in the past through that
 filter, after the time index 
\begin_inset Formula $k>m$
\end_inset

.
 In addition, all the nodes in the network can share the same coefficients,
 when the minimal polynomial of 
\begin_inset Formula $W$
\end_inset

 is not changed.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:Sum-coef.=1"

\end_inset

The sum coefficients 
\shape up

\begin_inset Formula $\left\{ a_{j}\right\} =\left\{ a_{m-1},\ldots,a_{1},a_{0}\right\} $
\end_inset


\shape default
 is equals to negative one, i.e.
 
\begin_inset Formula $\sum_{j=0}^{m-1}a_{j}=-1$
\end_inset


\shape up
.
 
\end_layout

\begin_layout Proof
It is obvious when the iteration converges.
 Since Eq.
 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:x(k+r) vector predictor"

\end_inset

 satisfied as 
\begin_inset Formula $k\to\infty$
\end_inset

, we have 
\begin_inset Formula $\bar{\mathbf{x}}+a_{m-1}\bar{\mathbf{x}}+\ldots+a_{1}\bar{\mathbf{x}}+a_{0}\bar{\mathbf{x}}=\mathbf{0}$
\end_inset

.
 Then, canceling the vector 
\begin_inset Formula $\bar{\mathbf{x}}$
\end_inset

 from the equation obtains that the sum of all coefficients equals to negative
 one.
 
\end_layout

\begin_layout Standard
Given the local value vector sequence obtained by FO-DCA, one may instantly
 comes to the idea of applying an adaptive filter algorithm to estimate
 the set of coefficient.
 For example, LMS, LSL and Kalman filter algorithms.
 One advantage of the adaptive filter algorithm is that when the network
 topology is changed, the filter could adaptively change its coefficient
 during the iteration.
 
\end_layout

\begin_layout Subsection
Find the coefficients of polynomial
\end_layout

\begin_layout Standard
After running FO-DAC algorithm for a number of step, node 
\begin_inset Formula $v_{i}$
\end_inset

 could list a number of equations by its available local values.
 Once they are sufficient equations to construct a matrix, which is a Toeplitz
 matrix, we can have a important result in the following.
\end_layout

\begin_layout Standard
Let the 
\begin_inset Formula $T_{i}=T_{i}\left(k,D_{i}\right)\in\mathbb{R}^{D_{i}\times D_{i}}$
\end_inset

 be a function at 
\begin_inset Formula $v_{i}$
\end_inset

 which outputs a Toeplitz matrix with size 
\begin_inset Formula $D_{i}$
\end_inset

 with 
\begin_inset Formula $x_{i}\left(k\right)$
\end_inset

 as diagonal entries.
\end_layout

\begin_layout Standard
\begin_inset Formula $T_{i}\left(k,D_{i}\right)=$
\end_inset

 
\begin_inset Formula 
\begin{align}
\left[\begin{array}{cccc}
x_{i}\left(k\right) & x_{i}\left(k-1\right) & \ldots & x_{i}\left(k-D_{i}+1\right)\\
x_{i}\left(k+1\right) & x_{i}\left(k\right) & \cdots & x_{i}\left(k-D_{i}+2\right)\\
\vdots & \vdots & \ddots & \vdots\\
x_{i}\left(k+D_{i}-2\right) & x_{i}\left(k+D_{i}-3\right) & \cdots & x_{i}\left(k-2\right)\\
x_{i}\left(k+D_{i}-1\right) & x_{i}\left(k+D_{i}-2\right) & \cdots & x_{i}\left(k\right)
\end{array}\right]\label{eq:Toeplitz_i simple-1}
\end{align}

\end_inset

Similarly, the function 
\begin_inset Formula $\mathbf{y}_{i}=\mathbf{y}_{i}\left(k,D_{i}\right)=\left[x_{i}\left(k+1\right),x_{i}\left(k+2\right),\ldots,x_{i}\left(k+D_{i}\right)\right]^{T}$
\end_inset

 outputs the local value history at 
\begin_inset Formula $v_{i}$
\end_inset

 from time 
\begin_inset Formula $k+1$
\end_inset

 to 
\begin_inset Formula $k+D_{i}$
\end_inset

.
 When input parameter are not given, 
\begin_inset Formula $T_{i}$
\end_inset

 and 
\begin_inset Formula $\mathbf{y}_{i}$
\end_inset

 also represents the Toeplitz matrix and local value history vector built
 at 
\begin_inset Formula $v_{i}$
\end_inset

.
 Let 
\begin_inset Formula $\mathbf{a}_{i}\left(D_{i}\right)=\left[a_{i,D_{i}-1},\ldots,a_{i,1},a_{i,0}\right]^{T}$
\end_inset

 be a vector of length 
\begin_inset Formula $D_{i}$
\end_inset

 representing the coefficients in the minimal polynomial calculated at 
\begin_inset Formula $v_{i}$
\end_inset

.
 Then, we have the solution of these equations given by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathbf{a}_{i}\left(D_{i}\right)=-T_{i}^{-1}\left(k,D_{i}\right)\mathbf{y}_{i}\left(k,D_{i}\right)\label{eq:Toeplitz Eq.-2}
\end{equation}

\end_inset

The size of the Toeplitz block 
\begin_inset Formula $D_{i}$
\end_inset

, should be less or equal to 
\begin_inset Formula $m$
\end_inset

 so that the Eq.
 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Toeplitz Eq.-2"

\end_inset

 have unique solution.
 To solve Eq.
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Toeplitz Eq.-2"

\end_inset

, node 
\begin_inset Formula $i$
\end_inset

 need to have sufficient local values.
\end_layout

\begin_layout Standard
Toeplitz matrix is a special type of matrix and can be inverted by some
 algorithms in the polynomial time of order 
\begin_inset Formula $N^{2}$
\end_inset

, rather than the order of 
\begin_inset Formula $N^{3}$
\end_inset

 in general case (for example by LU decomposition), which is an enormous
 computational saving 
\begin_inset CommandInset citation
LatexCommand cite
key "Prass2007"

\end_inset

.
 Levinson developed a recursive algorithm to solve the system quickly if
 the Toeplitz matrix is symmetric.
 However, the fact that the method can be generalized to the non-symmetric
 case is also stated in the texts 
\begin_inset CommandInset citation
LatexCommand cite
key "Robinson2000"

\end_inset

.
 Therefore, we will invert this Toeplitz matrix using Levinson's method.
\end_layout

\begin_layout Standard
One interesting advantage of Levinson's method is it can also apply to the
 case when weight matrix is non-symmetric.
 It can be demonstrated by just finding the inverse of a confluent Vandermonde
 matrix.
 In examining the inverse of confluent Vandermonde matrix and find the the
 expression of the row who corresponds to the unity eigenvalue, we note
 that the difference is that the length of consensus filter.
 It is not equal to the number of distinct and nonzero eigenvalues 
\begin_inset Formula $m$
\end_inset

, but equal to the sum of all orders in minimal polynomial of weight matrix
 
\begin_inset Formula $\sum_{i=1}^{m}r_{i}$
\end_inset

.
 However, the relationship of local value predictor and consensus finding
 filter still holds.
 Therefore, the proposed method and doesn't need to change and generalizes
 to the non-symmetric weight matrix case.
 
\end_layout

\begin_layout Standard
It totally needs 
\begin_inset Formula $2r+2$
\end_inset

 local values and 
\begin_inset Formula $2r+1$
\end_inset

 iterations to construct the Toeplitz matrix and Eq.
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Toeplitz Eq.-2"

\end_inset

, but all the local value can be obtained from one instance of FO-DCA.
 In contract, the the original finite-time consensus algorithm in 
\begin_inset CommandInset citation
LatexCommand cite
key "Sundaram2007"

\end_inset

 requires 
\begin_inset Formula $r$
\end_inset

 iterations of FO-DCA for each instance, and totally 
\begin_inset Formula $r$
\end_inset

 instances.
 Therefore, the proposed method has some improvement to the original finite-time
 consensus algorithm.
 
\end_layout

\begin_layout Standard
In the next section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Convert-Linear-Predictor "

\end_inset

, we will show how to obtain the consensus finding filter by linear predictor
 coefficients.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Convert-Linear-Predictor "

\end_inset

Convert Linear Predictor To Consensus Finding Filter
\end_layout

\begin_layout Standard
Once there are sufficient local values, node 
\begin_inset Formula $i$
\end_inset

 can solve the equation and obtain the set of coefficients 
\series bold

\begin_inset Formula $\mathbf{a}$
\end_inset


\series default
 and construct the polynomial 
\begin_inset Formula 
\[
p(\lambda)=\lambda^{m}+a_{m-1}\lambda^{m-1}+\ldots+a_{1}\lambda+a_{0}
\]

\end_inset


\end_layout

\begin_layout Standard
If matrix 
\begin_inset Formula $W$
\end_inset

 satisfies the condition in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "thm:convergence condition"

\end_inset

 there is a simple eigenvalue equals to one.
 As shown in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Find-the-Consensus"

\end_inset

, the consensus finding filter is given by the row of inverse of Vandermonde's
 matrix which corresponding to an eigenvalue equals to one.
 Without loss of generality, let the first eigenvalue 
\begin_inset Formula $\lambda_{1}=1$
\end_inset

.
 Thus, the consensus finding filter is given by the first row of the inverse
 of Vandermonde's Matrix.
\end_layout

\begin_layout Standard
Examining the the Lagrange's polynomial interpolation formula 
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:Lagrange's polynomial"

\end_inset

 we can rewrite the consensus finding filter
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 in terms of 
\begin_inset Formula $a_{k}$
\end_inset

.
 
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
To make the expression simple,
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 we may define another polynomial (
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Also see Eq.
\begin_inset CommandInset ref
LatexCommand formatted
reference "eq:intermindia polynomial"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
q\left(\lambda\right)=\frac{p\left(\lambda\right)}{\lambda-1}=c_{m}\lambda^{m-1}+c_{m-1}\lambda^{m-2}+\ldots+c_{2}\lambda+c_{1}
\]

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
where 
\begin_inset Formula $c_{k}=1+\sum_{j=k+1}^{m}a_{j}$
\end_inset

.
 The consensus finding filter can be given by the coefficient in 
\begin_inset Formula $q\left(\lambda\right)$
\end_inset

.
 
\begin_inset Formula 
\begin{equation}
\mathbf{h}=\frac{\left[c_{m},c_{m-1},\ldots,c_{2}\right]}{\sum_{k=1}^{m}c_{k}}\label{eq:Consensus Filter by polynomial}
\end{equation}

\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
This indicates the possibility of using the adaptive filter to estimate
 the consensus value after a certain number of iterations.
 
\end_layout

\begin_layout Subsection
Simulation
\begin_inset CommandInset label
LatexCommand label
name "sub:Numerical-Simulation"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename ../Distributed Consensus Algorithm/Report_DAC/Net_Weight/graph with 8 nodes and 17 edges.pdf

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Graph in Xiao'paper"

\end_inset

Graph with optimal weights which maximize convergence rate 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Consider the graph from 
\begin_inset CommandInset citation
LatexCommand cite
key "Xiao2004"

\end_inset

, the weight matrix 
\series bold

\begin_inset Formula $W$
\end_inset


\series default
 corresponding to this graph is symmetric and has eigenvalues 
\begin_inset Formula $\lambda(W)=\{1,0.6,0.4,0,0,0,-0.4,-0.6\}$
\end_inset

.
 The time index 
\begin_inset Formula $k$
\end_inset

 can be chosen large enough so that there are
\change_inserted 5863457 1348434085
 surfficient number of local values to estimate the filter coefficients.

\change_unchanged
 
\change_deleted 5863457 1348434026
only positive powers in the matrix 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $\mathbf{V}(k,d)$
\end_inset

.

\change_unchanged
 For example, there are
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 5 distinct and nonzero eigenvalues of 
\series bold

\begin_inset Formula $W$
\end_inset


\series default
, so we choose 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
the time index 
\begin_inset Formula $k=5$
\end_inset

 and 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset Formula $d=5$
\end_inset

 which is the minimum filter length
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
.
\change_deleted 5863457 1348434076

\end_layout

\begin_layout Standard

\change_deleted 5863457 1348434076

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
\begin_inset Formula 
\[
\mathbf{V}(5,5)=\left[\begin{array}{ccccc}
1 & 0.0778 & 0.0102 & -0.0102 & -0.0778\\
1 & 0.1296 & 0.0256 & 0.0256 & 0.1296\\
1 & 0.216 & 0.064 & -0.064 & -0.216\\
1 & 0.36 & 0.16 & 0.16 & 0.36\\
1 & 0.6 & 0.4 & -0.4 & -0.6
\end{array}\right]
\]

\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 the first row of the inverse matrix 
\begin_inset Formula $\mathbf{V}^{-1}(5,5)$
\end_inset


\change_unchanged

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 
\change_inserted 5863457 1348434155

\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
Based on Eq.
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Consensus Filter by polynomial"

\end_inset

 
\change_deleted 5863457 1348434158
gives 
\change_inserted 5863457 1348434160
 
\change_unchanged
the consensus finding filter 
\change_inserted 5863457 1348434163
is given by
\change_unchanged

\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbf{h}=\left[1.8601,\;0,\;-0.9673,\;0,\;0.1071\right]^{\mathrm{T}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename ../Distributed Consensus Algorithm/Report_DAC/MSE/MSE_Filter vs FODAC.eps
	width 8cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "cap:perform. Consensus Filter"

\end_inset

Performance of the first order iteration with optimal matrix vs.
 consensus finding filter algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For any random generated 
\begin_inset Formula $\mathbf{x}(0)\in R^{n}$
\end_inset

, node values vector 
\begin_inset Formula $\mathbf{x}(k)$
\end_inset

 is updated by the iteration Eq.
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:first order matrix"

\end_inset

.
 At the same time each node passes its local values though filter 
\begin_inset Formula $\mathbf{h}$
\end_inset

.
 Filter output is given by 
\begin_inset Formula $\hat{x}_{i}(k)=\mathbf{h}(k)*x_{i}(k)$
\end_inset

.
 Fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:perform. Consensus Filter"

\end_inset

 compares the first order DAC (FO-DAC) algorithm with optimal matrix and
 the proposed algorithm with consensus finding filter.
 The performance is evaluated by the mean square error (MSE), defined by
 
\begin_inset Formula $\mbox{MSE}_{\mbox{FO-DAC}}(k)=\sum_{i\in\mathcal{N}}E[\left|x_{i}(k)-\bar{x}\right|^{2}]$
\end_inset

, 
\begin_inset Formula $\mbox{MSE}_{\mbox{filter}}(k)=\sum_{i\in\mathcal{N}}E[\left|\alpha_{i}(k)-\bar{x}\right|^{2}]$
\end_inset

 respectively, where 
\begin_inset Formula $\bar{x}=(1/n)\sum_{i\in\mathcal{N}}x_{i}(0)$
\end_inset

.
 The result shows that the consensus finding filter calculate the consensus
 value after a finite number of iteration and MSE drops dramatically to
 the quantization error at the same time.
 
\end_layout

\begin_layout Subsection
Conclusion
\end_layout

\begin_layout Standard
In this section, we introduced the finite-time DAC on gernerlized condition.
 Compared to the previous version of finite-time DAC, the improvements are:
 it doesn't require the eigenvalues to be known prior to the algorithm.
 However, the number of iterations can not be decreased, because the minimum
 number of iterations is depends on the weight matrix, which is the same
 as the previous finite-time DAC.
 With this improment, some further algorithm could be drived.
 They will be introduced in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Online-Optimization-of"

\end_inset

.
\end_layout

\end_body
\end_document
